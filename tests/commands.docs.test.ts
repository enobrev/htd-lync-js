
import {describe, expect, test} from 'vitest'
import Command, {MP3_Action, PartyInput} from "../src/Command";


describe.concurrent('Power', () => {
    test.each([
        [false,	[0x02,0x00,0x00,0x04,0x56,0x5C]],
        [true,	[0x02,0x00,0x00,0x04,0x55,0x5B]],
    ])('Command.set_power(%j) -> %o', (power, expected) => {
        expect(Command.set_power(power).get_command()).toEqual(Buffer.from(expected));
    });
});

describe.concurrent('Query', () => {
    test('Command.get_status_all_zones()', async () => {
        expect(Command.get_status_all_zones().get_command()).toEqual(Buffer.from([0x02,0x00,0x00,0x05,0x00,0x07]));
    });
});

describe.concurrent('MP3', () => {

    test('Command.mp3_action(MP3_Action.Back)', async () => {
        expect(Command.mp3_action(MP3_Action.Back).get_command()).toEqual(Buffer.from([0x02,0x00,0x00,0x04,0x0C,0x12]));
    });

    test('Command.mp3_action(MP3_Action.FF)', async () => {
        expect(Command.mp3_action(MP3_Action.FF).get_command()).toEqual(Buffer.from([0x02,0x00,0x00,0x04,0x0A,0x10]));
    });

    test('Command.mp3_action(MP3_Action.Play)', async () => {
        expect(Command.mp3_action(MP3_Action.Play).get_command()).toEqual(Buffer.from([0x02,0x00,0x00,0x04,0x0B,0x11]));
    });

    test('Command.mp3_action(MP3_Action.Stop)', async () => {
        expect(Command.mp3_action(MP3_Action.Stop).get_command()).toEqual(Buffer.from([0x02,0x00,0x00,0x04,0x0D,0x13]));
    });

    test('Command.mp3_action(MP3_Action.Repeat_Off)', async () => {
        expect(Command.mp3_action(MP3_Action.Repeat_Off).get_command()).toEqual(Buffer.from([0x02,0x00,0x00,0x01,0x00,0x03]));
    });

    test('Command.mp3_action(MP3_Action.Repeat_On)', async () => {
        expect(Command.mp3_action(MP3_Action.Repeat_On).get_command()).toEqual(Buffer.from([0x02,0x00,0x00,0x01,0xFF,0x102]));
    });
});

describe.concurrent('DND', () => {
    test.concurrent.each([
        [ 1, false,	[0x02,0x00,0x01,0x04,0x5A,0x61]],
        [ 2, false,	[0x02,0x00,0x02,0x04,0x5A,0x62]],
        [ 3, false,	[0x02,0x00,0x03,0x04,0x5A,0x63]],
        [ 4, false,	[0x02,0x00,0x04,0x04,0x5A,0x64]],
        [ 5, false,	[0x02,0x00,0x05,0x04,0x5A,0x65]],
        [ 6, false,	[0x02,0x00,0x06,0x04,0x5A,0x66]],
        [ 7, false,	[0x02,0x00,0x07,0x04,0x5A,0x67]],
        [ 8, false,	[0x02,0x00,0x08,0x04,0x5A,0x68]],
        [ 9, false,	[0x02,0x00,0x09,0x04,0x5A,0x69]],
        [10, false,	[0x02,0x00,0x0A,0x04,0x5A,0x6A]],
        [11, false,	[0x02,0x00,0x0B,0x04,0x5A,0x6B]],
        [12, false,	[0x02,0x00,0x0C,0x04,0x5A,0x6C]],
        [ 1, true,	[0x02,0x00,0x01,0x04,0x59,0x60]],
        [ 2, true,	[0x02,0x00,0x02,0x04,0x59,0x61]],
        [ 3, true,	[0x02,0x00,0x03,0x04,0x59,0x62]],
        [ 4, true,	[0x02,0x00,0x04,0x04,0x59,0x63]],
        [ 5, true,	[0x02,0x00,0x05,0x04,0x59,0x64]],
        [ 6, true,	[0x02,0x00,0x06,0x04,0x59,0x65]],
        [ 7, true,	[0x02,0x00,0x07,0x04,0x59,0x66]],
        [ 8, true,	[0x02,0x00,0x08,0x04,0x59,0x67]],
        [ 9, true,	[0x02,0x00,0x09,0x04,0x59,0x68]],
        [10, true,	[0x02,0x00,0x0A,0x04,0x59,0x69]],
        [11, true,	[0x02,0x00,0x0B,0x04,0x59,0x6A]],
        [12, true,	[0x02,0x00,0x0C,0x04,0x59,0x6B]],
    ])('Command.set_dnd(%i, %j) -> %o', (zone, on, expected) => {
        expect(Command.set_dnd(zone, on).get_command()).toEqual(Buffer.from(expected));
    })
});

describe.concurrent('Mute', () => {
    test.concurrent.each([
        [ 1, false,	[0x02,0x00,0x01,0x04,0x1F,0x26]],
        [ 2, false,	[0x02,0x00,0x02,0x04,0x1F,0x27]],
        [ 3, false,	[0x02,0x00,0x03,0x04,0x1F,0x28]],
        [ 4, false,	[0x02,0x00,0x04,0x04,0x1F,0x29]],
        [ 5, false,	[0x02,0x00,0x05,0x04,0x1F,0x2A]],
        [ 6, false,	[0x02,0x00,0x06,0x04,0x1F,0x2B]],
        [ 7, false,	[0x02,0x00,0x07,0x04,0x1F,0x2C]],
        [ 8, false,	[0x02,0x00,0x08,0x04,0x1F,0x2D]],
        [ 9, false,	[0x02,0x00,0x09,0x04,0x1F,0x2E]],
        [10, false,	[0x02,0x00,0x0A,0x04,0x1F,0x2F]],
        [11, false,	[0x02,0x00,0x0B,0x04,0x1F,0x30]],
        [12, false,	[0x02,0x00,0x0C,0x04,0x1F,0x31]],
        [ 1, true,	[0x02,0x00,0x01,0x04,0x1E,0x25]],
        [ 2, true,	[0x02,0x00,0x02,0x04,0x1E,0x26]],
        [ 3, true,	[0x02,0x00,0x03,0x04,0x1E,0x27]],
        [ 4, true,	[0x02,0x00,0x04,0x04,0x1E,0x28]],
        [ 5, true,	[0x02,0x00,0x05,0x04,0x1E,0x29]],
        [ 6, true,	[0x02,0x00,0x06,0x04,0x1E,0x2A]],
        [ 7, true,	[0x02,0x00,0x07,0x04,0x1E,0x2B]],
        [ 8, true,	[0x02,0x00,0x08,0x04,0x1E,0x2C]],
        [ 9, true,	[0x02,0x00,0x09,0x04,0x1E,0x2D]],
        [10, true,	[0x02,0x00,0x0A,0x04,0x1E,0x2E]],
        [11, true,	[0x02,0x00,0x0B,0x04,0x1E,0x2F]],
        [12, true,	[0x02,0x00,0x0C,0x04,0x1E,0x30]],
    ])('Command.set_mute(%i, %j) -> %o', (zone, on, expected) => {
        expect(Command.set_mute(zone, on).get_command()).toEqual(Buffer.from(expected));
    })
});

describe.concurrent('Zone Power', () => {
    test.concurrent.each([
        [ 1, false,	[0x02,0x00,0x01,0x04,0x58,0x5F]],
        [ 2, false,	[0x02,0x00,0x02,0x04,0x58,0x60]],
        [ 3, false,	[0x02,0x00,0x03,0x04,0x58,0x61]],
        [ 4, false,	[0x02,0x00,0x04,0x04,0x58,0x62]],
        [ 5, false,	[0x02,0x00,0x05,0x04,0x58,0x63]],
        [ 6, false,	[0x02,0x00,0x06,0x04,0x58,0x64]],
        [ 7, false,	[0x02,0x00,0x07,0x04,0x58,0x65]],
        [ 8, false,	[0x02,0x00,0x08,0x04,0x58,0x66]],
        [ 9, false,	[0x02,0x00,0x09,0x04,0x58,0x67]],
        [10, false,	[0x02,0x00,0x0A,0x04,0x58,0x68]],
        [11, false,	[0x02,0x00,0x0B,0x04,0x58,0x69]],
        [12, false,	[0x02,0x00,0x0C,0x04,0x58,0x6A]],
        [ 1, true,	[0x02,0x00,0x01,0x04,0x57,0x5E]],
        [ 2, true,	[0x02,0x00,0x02,0x04,0x57,0x5F]],
        [ 3, true,	[0x02,0x00,0x03,0x04,0x57,0x60]],
        [ 4, true,	[0x02,0x00,0x04,0x04,0x57,0x61]],
        [ 5, true,	[0x02,0x00,0x05,0x04,0x57,0x62]],
        [ 6, true,	[0x02,0x00,0x06,0x04,0x57,0x63]],
        [ 7, true,	[0x02,0x00,0x07,0x04,0x57,0x64]],
        [ 8, true,	[0x02,0x00,0x08,0x04,0x57,0x65]],
        [ 9, true,	[0x02,0x00,0x09,0x04,0x57,0x66]],
        [10, true,	[0x02,0x00,0x0A,0x04,0x57,0x67]],
        [11, true,	[0x02,0x00,0x0B,0x04,0x57,0x68]],
        [12, true,	[0x02,0x00,0x0C,0x04,0x57,0x69]],
    ])('Command.set_mute(%i, %j) -> %o', (zone, on, expected) => {
        expect(Command.set_zone_power(zone, on).get_command()).toEqual(Buffer.from(expected));
    })
});

describe.concurrent('Party Mode (docs were wrong)', () => {
    test.concurrent.each([
        [PartyInput._01, [0x02,0x00,0x00,0x04,0x36,0x3C]],
        [PartyInput._02, [0x02,0x00,0x00,0x04,0x37,0x3D]],
        [PartyInput._03, [0x02,0x00,0x00,0x04,0x38,0x3E]],
        [PartyInput._04, [0x02,0x00,0x00,0x04,0x39,0x3F]],
        [PartyInput._05, [0x02,0x00,0x00,0x04,0x3A,0x40]],
        [PartyInput._06, [0x02,0x00,0x00,0x04,0x3B,0x41]],
        [PartyInput._07, [0x02,0x00,0x00,0x04,0x3C,0x42]],
        [PartyInput._08, [0x02,0x00,0x00,0x04,0x3D,0x43]],
        [PartyInput._09, [0x02,0x00,0x00,0x04,0x3E,0x44]],
        [PartyInput._10, [0x02,0x00,0x00,0x04,0x3F,0x45]],
        [PartyInput._11, [0x02,0x00,0x00,0x04,0x40,0x46]],
        [PartyInput._12, [0x02,0x00,0x00,0x04,0x41,0x47]],
        [PartyInput._13, [0x02,0x00,0x00,0x04,0x69,0x6F]],
        [PartyInput._14, [0x02,0x00,0x00,0x04,0x6A,0x70]],
        [PartyInput._15, [0x02,0x00,0x00,0x04,0x6B,0x71]],
        [PartyInput._16, [0x02,0x00,0x00,0x04,0x6C,0x72]],
        [PartyInput._17, [0x02,0x00,0x00,0x04,0x6D,0x73]],
        [PartyInput._18, [0x02,0x00,0x00,0x04,0x6E,0x74]]
    ])('Command.set_party_mode(%i) -> %o', (party_input, expected) => {
        expect(Command.set_party_mode(party_input).get_command()).toEqual(Buffer.from(expected));
    })
});
